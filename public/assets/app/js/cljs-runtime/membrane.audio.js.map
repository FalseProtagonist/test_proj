{"version":3,"sources":["membrane/audio.cljs"],"mappings":";AAIA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AACP,AAAI,AAAgBC,AAClB,AAAAC,AACA,AAAAC;;AAGJ,AAAA,AAAMC,AAAYC;AAAlB,AACE,AAAMC,AAAI,AAAAC;AACJC,AAAU,AAAA,AAACC;AADjB,AAEE,AAAA,AAAA,AAAOH,AAAUD;;AACjB,AAAA,AAAM,AAAgBC;;AACtB,AAAM,AAAUA,AACV;AAAA,AACE,AAAkBN,AACA,AAAYM,AACZ,AAAKI;AAAL,AACE,AAACC,AAAOH,AAAUE;;;;AAC9C,AAAOJ;;AACPE;;AAEJ,AAAA,AAAMI,AAAYJ;AAAlB,AACE,AAAAK,AAAA,AAAAC,AAAsBN;AAAtB,AAAA,AAAAK;AAAA,AAAA,AAAAA,AAAWE;AAAX,AACE,AAAMC,AAAI,AAAqBhB;AAA/B,AACE,AAAM,AAAUgB,AAAKD;;AACrB,AAAUC,AAAI,AAAehB;;AAC7B,AAAA,AAAQgB;;AAJZ","names":["js/membrane","js/membrane.audio","js/membrane.audio.audio-context","membrane.audio/audio-context","js/window","js/window.AudioContext","js/window.webkitAudioContext","membrane.audio/load-audio","url","req","js/XMLHttpRequest","audio-ref","cljs.core.atom","buf","cljs.core/reset!","membrane.audio/play-audio","temp__5753__auto__","cljs.core/deref","audio-buf","src"],"sourcesContent":["(ns membrane.audio)\n\n\n\n(defonce audio-context\n  (if (.-AudioContext js/window)\n    (js/window.AudioContext.)\n    (js/window.webkitAudioContext.)))\n\n\n(defn load-audio [url]\n  (let [req (js/XMLHttpRequest.)\n        audio-ref (atom nil )]\n    (.open req \"GET\" url true)\n    (set! (.-responseType req) \"arraybuffer\")\n    (set! (.-onload req)\n          (fn []\n            (.decodeAudioData audio-context\n                              (.-response req)\n                              (fn [buf]\n                                (reset! audio-ref buf)))))\n    (.send req)\n    audio-ref))\n\n(defn play-audio [audio-ref]\n  (when-let [audio-buf @audio-ref]\n    (let [src (.createBufferSource audio-context)]\n      (set! (.-buffer src) audio-buf)\n      (.connect src (.-destination audio-context))\n      (.start src 0))))\n"]}