{"version":3,"sources":["membrane/webgl.cljs"],"mappings":"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","names":["membrane.webgl/*paint-style*","membrane.webgl/*already-drawing*","js/membrane","js/membrane.webgl","js/membrane.webgl.event-handlers","membrane.webgl/event-handlers","cljs.core.atom","js/membrane.webgl.font-cache","membrane.webgl/font-cache","membrane$webgl$IDraw$draw$dyn","x__4428__auto__","m__4429__auto__","membrane.webgl/draw","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","membrane.webgl/IDraw","this","draw__46081__auto__","fexpr__48428","cljs.core.get","cljs.core/deref","membrane.ui/default-draw-impls","goog.object/set","this__46082__auto__","fexpr__48430","membrane.ui/OnMouseMoveGlobal","cljs.core/PROTOCOL_SENTINEL","fexpr__48435","membrane.ui/OnDrop","fexpr__48436","membrane.ui/OnMouseMove","fexpr__48437","membrane.ui/Spacer","fexpr__48438","membrane.ui/OnClipboardPaste","fexpr__48439","membrane.ui/Rectangle","fexpr__48441","membrane.ui/OnBubble","fexpr__48445","membrane.ui/NoEvents","fexpr__48446","membrane.ui/OnClipboardCopy","fexpr__48450","membrane.ui/OnClipboardCut","fexpr__48451","membrane.ui/NoKeyPress","fexpr__48453","membrane.ui/OnClick","fexpr__48454","membrane.ui/NoKeyEvent","fexpr__48458","membrane.ui/OnKeyPress","fexpr__48461","membrane.ui/Button","fexpr__48462","membrane.ui/OnKeyEvent","fexpr__48463","membrane.ui/Padding","fexpr__48467","membrane.ui/OnMouseEvent","fexpr__48471","membrane.ui/Bordered","fexpr__48475","membrane.ui/TryDraw","fexpr__48483","membrane.ui/FixedBounds","fexpr__48490","cljs.core/PersistentVector","fexpr__48492","fexpr__48499","membrane.ui/OnScroll","fexpr__48507","membrane.ui/OnMouseUp","fexpr__48516","membrane.ui/Checkbox","fexpr__48517","membrane.ui/EventHandler","fexpr__48522","membrane.ui/FillBordered","fexpr__48528","membrane.ui/OnMouseDown","js/membrane.webgl.*draw-cache*","membrane.webgl/*draw-cache*","membrane.webgl/canvas-copy-props","membrane.webgl/copy-canvas-properties!","from","to","seq__48529","cljs.core/seq","chunk__48530","count__48531","i__48532","temp__5753__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","p","goog.object/get","membrane.webgl/cached-draw","drawable","padding","vec__48534","cljs.core.nth","vec__48537","xscale","yscale","content-scale","js/window","img","img-width","img-height","temp__5751__auto__","img-info","vec__48546","w","h","membrane.ui/bounds","x__4214__auto__","y__4215__auto__","offscreen-canvas","G__48549","G__48550","membrane.webgl/create-canvas","offscreen-context","_","membrane.webgl/*ctx*","*ctx*-orig-val__48554","*already-drawing*-orig-val__48555","*ctx*-temp-val__48556","*already-drawing*-temp-val__48557","cljs.core.not_EQ_","cljs.core.swap_BANG_","cljs.core/assoc","ctx__48385__auto__","this__4380__auto__","k__4381__auto__","this__4382__auto__","k48566","else__4383__auto__","G__48571","cljs.core/Keyword","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__48572","vec__48573","k__4403__auto__","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","G__48565","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this48567","other48568","cljs.core._EQ_","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__48599","cljs.core/keyword-identical?","expr__48600","cljs.core.assoc","this__4392__auto__","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","membrane.webgl/Cached","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__48570","extmap__4419__auto__","G__48615","cljs.core/record?","membrane.webgl/->Cached","membrane.webgl/map->Cached","membrane.ui/origin","membrane.ui/Cached","js/membrane.webgl.freetype-callbacks","membrane.webgl/freetype-callbacks","membrane.webgl/on-freetype-loaded","callback","cljs.core/conj","var_args","G__48618","membrane.webgl/load-font","js/Error","font-name","stylesheet-url","ttf-url","membrane.webgl.load_font","js/module$node_modules$opentype_DOT_js$dist$opentype","err","font","cljs.core.println","js/console.log","cljs.core/reset!","membrane.component/component-cache","seq__48626","chunk__48627","count__48628","i__48629","cb","link","js/document","G__48644","membrane.webgl/font-scale","freetype-font","font-size","membrane.webgl/get-font","cache","membrane.webgl/font-units->pixels","font-units","membrane.ui/default-font","fscale","membrane.webgl/font-line-height","os2","sTypoAscender","sTypoDescender","sTypoLineGap","line-height","membrane.webgl/line-bounds","text","maxy","cljs.core/volatile!","maxx","or__4126__auto__","obj48649","glyph","gx","gy","gFontSize","membrane.webgl/text-bounds","lines","clojure.string.split","bounds","p1__48651#","cljs.core.map","cljs.core/max","membrane.webgl/draw-rect","G__48655","membrane.webgl/index-for-position","px","py","line-index","line","options","obj48659","glyphs","position","script","kerning-lookups","column-index","idx","x","y","next-glyph","kerning-value","cljs.core.apply","cljs.core/+","p1__48656#","cljs.core.take","membrane.ui/index-for-position","membrane.ui/Label","seq__48680","chunk__48681","count__48682","i__48683","G__48690","G__48691","js/membrane.webgl.images","membrane.webgl/images","membrane.webgl/image-size","image-path","membrane.ui/image-size","membrane.ui/Image","image-info","vec__48698","width","height","opacity","membrane.ui/Translate","membrane.webgl/render-selection","selection-start","selection-end","color","obj48704","selection-height","selection-length","c","new-x","new-y","selection-width","membrane.ui/translate","membrane.ui/filled-rectangle","membrane.ui/TextSelection","map__48728","cljs.core/hash-map","vec__48729","membrane.ui/TextCursor","cursor","x__4217__auto__","y__4218__auto__","membrane.ui/RoundedRectangle","map__48743","border-radius","G__48745","G__48753","G__48754","membrane.ui/Path","vec__48760","seq__48767","chunk__48768","count__48769","i__48770","vec__48788","vec__48807","cljs.core/rest","G__48811","G__48812","p__48814","vec__48816","membrane.webgl/color-text","r","g","b","a","membrane.ui/WithColor","color-style","seq__48825","chunk__48826","count__48827","i__48828","membrane.ui/WithStyle","style","*paint-style*-orig-val__48871","*paint-style*-temp-val__48872","seq__48873","chunk__48874","count__48875","i__48876","membrane.ui/WithStrokeWidth","stroke-width","seq__48907","chunk__48908","count__48909","i__48910","membrane.ui/Scale","vec__48927","sx","sy","seq__48930","chunk__48931","count__48932","i__48933","membrane.ui/Arc","membrane.ui/ScissorView","vec__48943","vec__48946","ox","oy","G__48953","js/Path2D","membrane.webgl/scrollview-draw","scrollview","membrane.ui/->ScissorView","vec__48955","mx","my","membrane.ui/ScrollView","seq__48975","chunk__48976","count__48977","i__48978","G__48983","k48985","G__48992","ui","make-ui","last-touch","touch-check?","canvas-elem","draw-cache","ctx","p__48993","vec__48994","G__48984","this48986","other48987","pred__49013","expr__49014","membrane.webgl/WebglCanvas","G__48988","G__49032","membrane.webgl/->WebglCanvas","membrane.webgl/map->WebglCanvas","membrane.webgl/update-scale","canvas","and__4115__auto__","cwidth","cheight","canvas-style","membrane.webgl/webgl-canvas","seq__49037","chunk__49038","count__49039","i__49040","vec__49078","vec__49081","event","handler","cljs.core.partial","membrane.webgl/redraw","*ctx*-orig-val__49087","*draw-cache*-orig-val__49088","*ctx*-temp-val__49089","*draw-cache*-temp-val__49090","fexpr__49092","membrane.webgl/run","weight","membrane.webgl/get-client-pos","e","touches","touch","membrane.webgl/-on-mouse-down","cljs.core/not","vec__49109","rect","client-x","client-y","pos","button","mouse-down?","e49112","membrane.ui/mouse-event","js/Object","current-time","js/Date","last-touch-time","membrane.webgl/-on-mouse-up","vec__49118","e49121","membrane.webgl/-on-mouse-move","vec__49128","e49131","cljs.core.doall","membrane.ui/mouse-move","membrane.ui/mouse-move-global","membrane.webgl/keymap","membrane.webgl/-on-key-down","raw-key","key","membrane.ui.key_event","membrane.ui.key_press","membrane.webgl/-on-key-up"],"sourcesContent":["(ns membrane.webgl\n  (:require-macros [membrane.webgl-macros\n                    :refer [push-state\n                            add-image!]]\n                   [membrane.ui :refer [add-default-draw-impls-cljs!]])\n  (:require [membrane.ui :as ui\n             :refer [IBounds\n                     bounds\n                     IOrigin\n                     origin\n                     -origin\n                     IChildren\n                     -children\n                     vertical-layout\n                     horizontal-layout\n                     rectangle\n                     button\n                     bordered\n                     filled-rectangle\n                     label\n                     image]]\n            [membrane.audio :as audio]\n            [\"opentype.js\" :as opentype]\n            goog.object\n            [membrane.component :refer [defui]]))\n\n\n(def ^:dynamic *ctx*)\n(def ^:dynamic *paint-style* :membrane.ui/style-fill)\n(def ^:dynamic *already-drawing* nil)\n(defonce event-handlers (atom {}))\n(defonce font-cache (atom {}))\n\n(defprotocol IDraw\n  (draw [this]))\n\n(add-default-draw-impls-cljs! IDraw draw)\n\n(defonce ^:dynamic *draw-cache* nil)\n\n(def canvas-copy-props\n  [\"direction\"\n   \"fillStyle\"\n   \"filter\"\n   \"font\"\n   \"globalAlpha\"\n   \"globalCompositeOperation\"\n   \"imageSmoothingEnabled\"\n   \"imageSmoothingQuality\"\n   \"lineCap\"\n   \"lineDashOffset\"\n   \"lineJoin\"\n   \"lineWidth\"\n   \"miterLimit\"\n   \"shadowBlur\"\n   \"shadowColor\"\n   \"shadowOffsetX\"\n   \"shadowOffsetY\"\n   \"strokeStyle\"\n   \"textAlign\"\n   \"textBaseline\"\n\n   ;; These don't make sense to copy\n   ;; \"getTransform\"\n   ;; \"canvas\"\n   ;; \"currentTransform\"\n   ])\n(defn copy-canvas-properties! [from to]\n  (doseq [p canvas-copy-props]\n    (goog.object/set to p (goog.object/get from p))))\n\n(declare create-canvas)\n\n(defn cached-draw [drawable]\n  #_(draw drawable)\n  (let [padding (float 5)]\n    (if *already-drawing*\n      (draw drawable)\n      (let [[xscale yscale :as content-scale] [(.-devicePixelRatio js/window)\n                                               (.-devicePixelRatio js/window)]\n            [img img-width img-height]\n            (if-let [img-info (get @*draw-cache* [drawable content-scale *paint-style*])]\n              img-info\n              (do\n                (let [[w h] (bounds drawable)\n                      img-width (int (+ (* 2 padding) (max 0 w)))\n                      img-height (int (+ (* 2 padding) (max 0 h)))\n                      offscreen-canvas (create-canvas (* xscale img-width) (* yscale img-height))\n\n                      offscreen-context (.getContext offscreen-canvas \"2d\")\n                      _ (copy-canvas-properties! *ctx* offscreen-context)\n\n                      _ (binding [*ctx* offscreen-context\n                                  *already-drawing* true]\n                          (when (and (not= xscale 1)\n                                     (not= yscale 1))\n                            (.scale *ctx* xscale yscale))\n\n                          (.translate *ctx* padding padding)\n                          (draw drawable))\n                      img offscreen-canvas\n                      img-info [img img-width img-height]]\n                  (swap! *draw-cache* assoc [drawable content-scale *paint-style*] img-info)\n                  img-info)))]\n        (push-state *ctx*\n                    (.drawImage *ctx* img (- padding) (- padding) img-width img-height))))))\n\n(defrecord Cached [drawable]\n    IOrigin\n    (-origin [_]\n        (origin drawable))\n\n    IBounds\n    (-bounds [_]\n        (bounds drawable))\n\n  IChildren\n  (-children [this]\n      [drawable])\n\n  IDraw\n  (draw [this]\n    (cached-draw drawable)\n\n    )\n  )\n\n(extend-type membrane.ui.Cached\n    IDraw\n    (draw [this]\n      (cached-draw (:drawable this))))\n\n(defonce freetype-callbacks (atom []))\n(defn on-freetype-loaded [callback]\n  (if (seq @font-cache)\n    (callback)\n    (swap! freetype-callbacks conj callback)))\n\n(defn load-font\n  ([font-name stylesheet-url ttf-url]\n   (load-font font-name stylesheet-url ttf-url nil))\n  ([font-name stylesheet-url ttf-url callback]\n   (.load opentype\n          ttf-url\n          (fn [err font]\n            (if err\n              (do (println \"Error: \" err)\n                  (js/console.log err))\n              (do\n                (swap! font-cache assoc font-name font)\n                (reset! membrane.component/component-cache {})\n                (doseq [cb @freetype-callbacks]\n                  (cb))\n                (reset! freetype-callbacks [])\n                (when callback\n                  (callback))))))\n\n   (let [link (.createElement js/document \"link\")]\n     (doto link\n       (.setAttribute \"rel\" \"stylesheet\")\n       (.setAttribute \"href\" stylesheet-url))\n     (.appendChild (-> js/document .-body)\n                   link))))\n\n(load-font \"Ubuntu\"\n           \"https://fonts.googleapis.com/css?family=Ubuntu&display=swap\"\n           \"https://fonts.gstatic.com/s/ubuntu/v10/4iCs6KVjbNBYlgo6eA.ttf\")\n\n\n(defn font-scale [freetype-font font-size]\n  (* (/ 1 (aget freetype-font \"unitsPerEm\"))\n     font-size))\n\n(defn get-font [font]\n  (let [cache @font-cache]\n    (get cache (:name font)\n         (get cache \"Ubuntu\"))))\n\n(defn font-units->pixels [font font-units]\n  (let [font-size (get font :size (:size ui/default-font))\n        fscale (font-scale (get-font font) font-size)]\n    (* font-units fscale)))\n\n(defn font-line-height [font]\n  (let [os2 (-> (get-font font)\n                (aget \"tables\")\n                (aget \"os2\"))\n        sTypoAscender (font-units->pixels font (aget os2  \"sTypoAscender\"))\n        sTypoDescender (font-units->pixels font (aget os2  \"sTypoDescender\"))\n        sTypoLineGap (font-units->pixels font (aget os2  \"sTypoLineGap\"))\n        line-height (+ (- sTypoAscender sTypoDescender) sTypoLineGap)]\n    line-height))\n\n(defn line-bounds [font text]\n  (let [maxy (volatile! 0)\n        maxx (.forEachGlyph (get-font font)\n                            text\n                            0 0\n                            (or (:size font)\n                                (:size ui/default-font))\n                            (js-obj {:kerning false})\n                            (fn [glyph gx gy gFontSize]\n                              (vswap! maxy max (or (aget glyph \"yMax\") 0))))]\n    [maxx (font-units->pixels font @maxy)]))\n\n(defn text-bounds [font text]\n  (let [lines (clojure.string/split text #\"\\n\" -1)\n        bounds (map #(line-bounds font %) lines)\n        maxx (reduce max 0 (map first bounds))\n        maxy (* (dec (font-line-height font))\n                (count lines))]\n    [maxx maxy]))\n\n\n(defn draw-rect []\n  (set! (.-fillStyle *ctx*)  \"green\")\n  (case *paint-style*\n    :membrane.ui/style-fill (.fillRect *ctx* 10, 10, 150, 100)\n    :membrane.ui/style-stroke (.strokeRect *ctx* 10, 10, 150, 100)\n    :membrane.ui/style-stroke-and-fill (do (.strokeRect *ctx* 10, 10, 150, 100)\n                                           (.fillRect *ctx* 10, 10, 150, 100))))\n\n\n\n(defn index-for-position [font text px py]\n  (let [lines (clojure.string/split text #\"\\n\" -1)\n        line-height (font-line-height font)\n        line-index (int (/ py line-height))]\n    (if (>= line-index (count lines))\n      (count text)\n      (let [line (nth lines line-index)\n            font-size (get font :size (:size ui/default-font))\n            options (js-obj {:kerning true})\n            freetype-font (get-font font)\n            glyphs (.stringToGlyphs freetype-font line)\n            position  (aget freetype-font \"position\")\n            script (.getDefaultScriptName position)\n            kerning-lookups (.getKerningTables position\n                                               script\n                                               nil)\n            fscale (font-scale freetype-font font-size)\n            column-index (loop [idx 0\n                                x 0\n                                y 0]\n                           (if (< px x)\n                             (dec idx)\n                             (if (< idx (alength glyphs))\n                               (let [glyph (aget glyphs idx)\n                                     x (if (aget glyph \"advanceWidth\")\n                                         (+ x (* fscale (aget glyph \"advanceWidth\")))\n                                         x)\n                                     x (if (< idx (dec (alength glyphs)))\n                                         (let [next-glyph (aget glyphs (inc idx))\n                                               kerning-value (if kerning-lookups\n                                                               (.getKerningValue position (aget glyph \"index\") (aget next-glyph \"index\"))\n                                                               (.getKerningValue freetype-font glyph next-glyph))]\n                                           (+ x (* kerning-value fscale)))\n                                         x)]\n                                 (recur (inc idx)\n                                        x\n                                        y))\n                               idx)))]\n        (apply + column-index (map #(inc (count %)) (take line-index lines)))))\n    ))\n(set! membrane.ui/index-for-position index-for-position)\n\n(extend-type membrane.ui.Label\n  IBounds\n  (-bounds [this]\n    (let [font (:font this)]\n     (text-bounds font\n                  (:text this))))\n  IDraw\n  (draw [this]\n    (let [lines (clojure.string/split (:text this) #\"\\n\" -1)\n          font (:font this)\n          line-height (font-line-height font)]\n     (push-state *ctx*\n                 (when font\n                   (set! (.-font *ctx*)\n                         (str (when (:weight font)\n                                (str (:weight font) \" \"))\n                              (or (:size font)\n                                  (:size ui/default-font))\n                              \"px \"\n                              \"'\"\n                              (or (:name font)\n                                  \"Ubuntu\")\n                              \"'\")))\n\n                 (doseq [line lines]\n                   (.translate *ctx* 0 (dec line-height))\n                   (case *paint-style*\n\n                     :membrane.ui/style-fill (.fillText *ctx* line 0 0)\n                     :membrane.ui/style-stroke (.strokeText *ctx* line 0 0)\n                     :membrane.ui/style-stroke-and-fill (do\n                                                          (.fillText *ctx* line 0 0)\n                                                          (.strokeText *ctx* line 0 0)))\n                   )))\n    ))\n\n(defonce images (atom {}))\n\n\n(defn image-size [image-path]\n  (-> @images\n      (get image-path)\n      :size))\n(set! membrane.ui/image-size image-size)\n\n\n(extend-type membrane.ui.Image\n  IBounds\n  (-bounds [this]\n    (:size this))\n  IDraw\n  (draw [this]\n    (when-let [image-info (get @images (:image-path this))]\n      (let [[width height] (:size this)]\n        (push-state *ctx*\n                    (when-let [opacity (:opacity this)]\n                      (set! (.-globalAlpha *ctx*) opacity))\n                    (.drawImage *ctx*\n                                (:image-obj image-info)\n                                0 0\n                                width height))))))\n(extend-type membrane.ui.Translate\n  IDraw\n  (draw [this]\n    (push-state *ctx*\n     (.translate *ctx* (:x this) (:y this))\n     (draw (:drawable this)))))\n\n\n(defn render-selection [font text selection-start selection-end color]\n  (let [font-size (get font :size (:size ui/default-font))\n        options (js-obj {:kerning true})\n        text (str text \"8\")\n        freetype-font (get-font font)\n        glyphs (.stringToGlyphs freetype-font text)\n        position  (aget freetype-font \"position\")\n        script (.getDefaultScriptName position)\n        kerning-lookups (.getKerningTables position\n                                           script\n                                           nil)\n        fscale (font-scale freetype-font font-size)\n        line-height (font-line-height font)\n        selection-height (font-units->pixels font (-> freetype-font\n                                                      (aget \"tables\")\n                                                      (aget \"hhea\")\n                                                      (aget \"ascender\")))]\n    (loop [x 0\n           y 0\n           selection-start selection-start\n           selection-length (- selection-end selection-start)\n           idx 0]\n      (when (pos? selection-length)\n        (let [c (nth text idx)\n              glyph (nth glyphs idx)]\n          (let [new-x (cond\n                        (= c \"\\n\") 0\n                        (aget glyph \"advanceWidth\") (let [new-x (+ x (* fscale (aget glyph \"advanceWidth\")))]\n                                                 (if (< idx (dec (alength glyphs)))\n                                                   (let [next-glyph (aget glyphs (inc idx))\n                                                         kerning-value (if kerning-lookups\n                                                                         (.getKerningValue position (aget glyph \"index\") (aget next-glyph \"index\"))\n                                                                         (.getKerningValue freetype-font glyph next-glyph))]\n                                                     (+ new-x (* kerning-value fscale)))\n                                                   x))\n                        :else x)\n                new-y (if (= c \"\\n\")\n                        (+ y (dec line-height))\n                        y)]\n            (if (<= selection-start 0)\n              (do\n                (let [selection-width (if (= c \"\\n\")\n                                        5\n                                        (- new-x x))]\n                  (draw (ui/translate x (+ y (- line-height\n                                           selection-height))\n                                 (filled-rectangle color\n                                                   selection-width selection-height))))\n                (recur new-x new-y 0 (dec selection-length) (inc idx)))\n              (recur new-x new-y (dec selection-start) selection-length (inc idx))))))\n      ))\n  )\n\n(extend-type membrane.ui.TextSelection\n  IBounds\n  (-bounds [this]\n    (text-bounds (:font this) (:text this)))\n\n  IDraw\n  (draw [this]\n    (let [{:keys [text font]\n           [selection-start selection-end] :selection} this]\n      (render-selection (:font this) text selection-start selection-end\n                        [0.6980392156862745\n                         0.8431372549019608\n                         1]))))\n\n(extend-type membrane.ui.TextCursor\n  IBounds\n  (-bounds [this]\n    (text-bounds (:font this) (:text this)))\n\n  IDraw\n  (draw [this]\n    (let [cursor (min (count (:text this)) (:cursor this))]\n      (render-selection (:font this) (str (:text this) \"8\") cursor (inc cursor)\n                        [0.9 0.9 0.9]))\n    ))\n\n\n\n(extend-type membrane.ui.RoundedRectangle\n  IDraw\n  (draw [this]\n    (let [{:keys [width height border-radius]} this\n          x 0\n          y 0]\n      (push-state *ctx*\n                  (.beginPath *ctx*)\n                  (doto *ctx*\n                    (.moveTo (+ x border-radius) y)\n                    (.lineTo , (+ x width (- border-radius)) y)\n                    (.quadraticCurveTo (+ x width), y, (+ x width) , (+ y border-radius))\n                    (.lineTo , (+ x width ) , (+ y  height (- border-radius)))\n                    (.quadraticCurveTo , (+ x  width) (+ y height,) (+ x width (- border-radius,)) (+ y height))\n                    (.lineTo , (+ x  border-radius,) (+ y height))\n                    (.quadraticCurveTo , x, (+ y height,) x, (+ y height (- border-radius)))\n                    (.lineTo , x, (+ y border-radius))\n                    (.quadraticCurveTo , x, y, (+ x border-radius,) y))\n                  (.closePath *ctx*)\n                  (case *paint-style*\n                    :membrane.ui/style-fill (.fill *ctx*)\n                    :membrane.ui/style-stroke (.stroke *ctx*)\n                    :membrane.ui/style-stroke-and-fill (doto *ctx*\n                                                         (.stroke)\n                                                         (.fill)))))))\n\n(extend-type membrane.ui.Path\n  IDraw\n  (draw [this]\n    (push-state *ctx*\n                (.beginPath *ctx*)\n                (let [[x y] (first (:points this))]\n                  (.moveTo *ctx* x y))\n                (doseq [[x y] (rest (:points this))]\n                  (.lineTo *ctx* x y))\n                (case *paint-style*\n                  :membrane.ui/style-fill (.fill *ctx*)\n                  :membrane.ui/style-stroke (.stroke *ctx*)\n                  :membrane.ui/style-stroke-and-fill (doto *ctx*\n                                                       (.stroke)\n                                                       (.fill))))))\n\n(defn color-text [[r g b a]]\n  (if a\n    (str \"rgba(\" (* r 255.0) \",\" (* g 255.0) \",\" (* b 255.0) \",\" a \")\")\n    (str \"rgb(\" (* r 255.0) \",\" (* g 255.0) \",\" (* b 255.0) \")\")))\n\n(extend-type membrane.ui.WithColor\n  IDraw\n  (draw [this]\n    (let [color-style (color-text (:color this))]\n      (push-state *ctx*\n                  (set! (.-fillStyle *ctx*) color-style)\n                  (set! (.-strokeStyle *ctx*) color-style )\n                  (doseq [drawable (:drawables this)]\n                    (draw drawable))))))\n\n(extend-type membrane.ui.WithStyle\n  IDraw\n  (draw [this]\n    (let [style (:style this)]\n      (binding [*paint-style* style]\n        (doseq [drawable (:drawables this)]\n          (draw drawable))))))\n\n(extend-type membrane.ui.WithStrokeWidth\n  IDraw\n  (draw [this]\n    (let [stroke-width (:stroke-width this)]\n      (push-state *ctx*\n                  (set! (.-lineWidth *ctx*) stroke-width)\n                  (doseq [drawable (:drawables this)]\n                    (draw drawable))\n                  ))))\n\n(extend-type membrane.ui.Scale\n  IDraw\n  (draw [this]\n    (push-state *ctx*\n                (let [[sx sy] (:scalars this)]\n                  (.scale *ctx* sx sy))\n                (doseq [drawable (:drawables this)]\n                  (draw drawable)))))\n\n(extend-type membrane.ui.Arc\n  IDraw\n  (draw [this]\n    (draw-rect)))\n\n(extend-type membrane.ui.ScissorView\n  IDraw\n  (draw [this]\n    (push-state *ctx*\n                (let [[ox oy] (:offset this)\n                      [w h] (:bounds this)]\n                  ;; (.scissor *ctx* ox oy w h)\n                  (.clip *ctx* (doto (new js/Path2D)\n                                 (.rect ox oy w h)))\n                  (draw (:drawable this))))))\n\n(defn scrollview-draw [scrollview]\n  (draw\n   (ui/->ScissorView [0 0]\n                  (:bounds scrollview)\n                  (let [[mx my] (:offset scrollview)]\n                    (ui/translate mx my (:drawable scrollview))))))\n\n(extend-type membrane.ui.ScrollView\n  IDraw\n  (draw [this]\n      (scrollview-draw this)))\n\n(extend-type membrane.ui.OnScroll\n  IDraw\n  (draw [this]\n      (doseq [drawable (:drawables this)]\n        (draw drawable))))\n\n(defn create-canvas [width height]\n  (doto (.createElement js/document \"canvas\")\n    (.setAttribute \"width\" width)\n    (.setAttribute \"height\" height)\n    (.setAttribute \"tabindex\" \"0\")))\n\n(defrecord WebglCanvas [ui make-ui last-touch touch-check? canvas-elem draw-cache ctx])\n\n(defn update-scale [canvas]\n  (let [content-scale (.-devicePixelRatio js/window)]\n    (when (and content-scale (not= 1 content-scale))\n      (let [cwidth (.-clientWidth canvas)\n            cheight (.-clientHeight canvas)\n            canvas-style (.-style canvas)\n            ctx (.getContext canvas \"2d\")]\n        (set! (.-width canvas-style) (str cwidth \"px\") )\n        (set! (.-height canvas-style) (str cheight \"px\"))\n\n        (set! (.-width canvas) (* cwidth content-scale))\n        (set! (.-height canvas) (* cheight content-scale))\n        #_(set! (.-font ctx)\n          (str (when-let [weight (:weight ui/default-font)]\n                 (str weight \" \"))\n               (:size ui/default-font) \"px\"\n               \" \"\n               \"Ubuntu\"\n               ;;(:name ui/default-font \"Ubuntu\")\n               ))))))\n\n(defn webgl-canvas [canvas-elem make-ui]\n  (let [ctx (.getContext canvas-elem \"2d\")\n        canvas (WebglCanvas.\n                (atom nil)\n                make-ui\n                (atom nil)\n                (atom false)\n                canvas-elem\n                (atom {})\n                ctx)]\n    (update-scale canvas-elem)\n    (doseq [[event handler] @event-handlers]\n      (.addEventListener canvas-elem event (partial handler canvas)))\n    canvas))\n\n(let [content-scale (.-devicePixelRatio js/window)]\n  (defn redraw [canvas]\n    (binding [*ctx* (:ctx canvas)\n              *draw-cache* (:draw-cache canvas)]\n      (let [ui (:ui canvas)\n            canvas-elem (:canvas-elem canvas)]\n        (.clearRect *ctx*\n                    0 0\n                    (.-width canvas-elem) (.-height canvas-elem))\n        (when (and\n               content-scale\n               (not= 1 content-scale)\n               (or (not= (.-width canvas-elem)\n                         (* content-scale (.-clientWidth canvas-elem)))\n                   (not= (.-height canvas-elem)\n                         (* content-scale (.-clientHeight canvas-elem)))))\n          (println \"resizing canvas\")\n          (update-scale canvas-elem))\n\n        (reset! ui ((:make-ui canvas)))\n        (push-state *ctx*\n                    (let [content-scale (.-devicePixelRatio js/window)]\n                      (when (and content-scale (not= 1 content-scale))\n                        (.scale *ctx* content-scale content-scale)))\n                    (draw @ui))\n        ))))\n\n\n\n(defn run [make-ui options]\n  (let [canvas (webgl-canvas (:container options) make-ui)]\n    (on-freetype-loaded\n     (fn []\n       (-> (.-fonts js/document)\n           (.load (str (when-let [weight (:weight ui/default-font)]\n                         (str weight \" \"))\n                       (:size ui/default-font) \"px\"\n                       \" \"\n                       \"Ubuntu\"\n                       ;;(:name ui/default-font)\n                       ))\n           (.then (fn []\n                    (let [ctx (:ctx canvas)]\n                      (set! (.-font ctx)\n                            (str (when-let [weight (:weight ui/default-font)]\n                                   (str weight \" \"))\n                                 (:size ui/default-font) \"px\"\n                                 \" \"\n                                 \"Ubuntu\"\n                                 ;;(:name ui/default-font \"Ubuntu\")\n                                 )))\n                    (redraw canvas))))))\n    {::canvas canvas\n     ::repaint #(redraw canvas)}))\n\n(defn get-client-pos [e]\n  (if-let [touches (.-targetTouches e)]\n    (let [touch (-> touches\n                    (aget 0))]\n      [(.-clientX touch) (.-clientY touch)])\n    [(.-clientX e) (.-clientY e)])\n  )\n\n\n(defn -on-mouse-down [canvas e]\n  (let [touch-check? (:touch-check? canvas)]\n    (when (not @touch-check?)\n      (do\n        (when (.-targetTouches e)\n          (.removeEventListener (:canvas-elem canvas) \"mousedown\" -on-mouse-down))\n        (reset! touch-check? true))))\n  \n  (let [rect (.getBoundingClientRect (:canvas-elem canvas))\n        [client-x client-y] (get-client-pos e)\n        pos [(- client-x (.-left rect))\n             (- client-y (.-top rect))]\n        button (.-button e)\n        mouse-down? true]\n    (try\n      (membrane.ui/mouse-event @(:ui canvas) pos button mouse-down? nil)\n      (catch js/Object e\n        (println e))))\n\n  (redraw canvas)\n  ;; (.stopPropagation e)\n  ;; (.preventDefault e)\n\n  (let [current-time (.getTime (js/Date.))\n        last-touch (:last-touch canvas)]\n    (when-let [last-touch-time @last-touch]\n      (when (< (- current-time last-touch-time)\n               300)\n        (.stopPropagation e)\n        (.preventDefault e)))\n    (reset! last-touch current-time))\n\n  nil)\n\n(swap! event-handlers\n       assoc\n       \"touchstart\" -on-mouse-down\n       \"mousedown\" -on-mouse-down)\n\n(defn -on-mouse-up [canvas e]\n  (let [rect (.getBoundingClientRect (:canvas-elem canvas))\n        [client-x client-y] (get-client-pos e)\n        pos [(- client-x (.-left rect))\n             (- client-y (.-top rect))]\n        button (.-button e)\n        mouse-down? false]\n    (try\n      (membrane.ui/mouse-event @(:ui canvas) pos button mouse-down? nil)\n      (catch js/Object e\n        (println e))))\n\n  (redraw canvas)\n  ;; (.stopPropagation e)\n  ;; (.preventDefault e)\n\n  nil)\n\n(swap! event-handlers\n       assoc\n       \"mouseup\" -on-mouse-up)\n\n\n#_(defn -scroll-callback [window window-handle offset-x offset-y]\n  (let [ui @(:ui window)\n        [x y] @(:mouse-position window)\n        results (find-all-under ui [x y] [0 0] #(satisfies? IScroll %))\n        ;; [[local-x local-y] result] (find-first-under ui [x y] [0 0] #(satisfies? IScroll %))\n        ]\n    (doseq [[[local-x local-y] result] results\n            :let [ret (try\n                        (-scroll result [offset-x offset-y])\n                        (catch Exception e\n                          (println e)))]\n            :while (not (false? ret))]))\n  (redraw))\n\n(defn -on-mouse-move [canvas e]\n  (let [rect (.getBoundingClientRect (:canvas-elem canvas))\n        [client-x client-y] (get-client-pos e)\n        pos [(- client-x (.-left rect))\n             (- client-y (.-top rect))]]\n        (try\n          (doall (membrane.ui/mouse-move @(:ui canvas) pos))\n          (doall (membrane.ui/mouse-move-global @(:ui canvas) pos))\n\n          (catch js/Object e\n            (println e))))\n\n  (redraw canvas)\n\n  ;; (.stopPropagation e)\n  ;; (.preventDefault e)\n  \n  nil)\n\n(swap! event-handlers\n       assoc\n       \"mousemove\" -on-mouse-move\n       \"touchmove\" -on-mouse-move)\n\n(def keymap\n  {\n   ;; probably should figure out how to distinguish left and right shift like on mac\n   \"Shift\" :shift\n   \"Enter\" :enter\n   \"Backspace\" :backspace\n\n   \"Up\" :up\n   \"Down\" :down\n   \"Left\" :left\n   \"Right\" :right\n   \"ArrowUp\" :up\n   \"ArrowDown\" :down\n   \"ArrowLeft\" :left\n   \"ArrowRight\" :right\n\n   })\n\n(defn -on-key-down [canvas e]\n  (let [raw-key (.-key e)\n        key (if (> (.-length raw-key) 1)\n                (get keymap raw-key :undefined)\n                raw-key)]\n    (membrane.ui/key-event @(:ui canvas) key nil nil nil)\n    (membrane.ui/key-press @(:ui canvas) key))\n\n    (.stopPropagation e)\n    (.preventDefault e)\n\n\n  (redraw canvas))\n\n(swap! event-handlers\n       assoc\n       \"keydown\" -on-key-down)\n\n(defn -on-key-up [canvas e]\n  ;; (println (.-key e))\n    (.stopPropagation e)\n    (.preventDefault e)\n\n\n  (redraw canvas))\n\n(swap! event-handlers\n       assoc\n       \"keyup\" -on-key-up)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]}